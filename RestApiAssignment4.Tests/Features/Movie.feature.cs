// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RestApiAssignment4.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MovieFeature : object, Xunit.IClassFixture<MovieFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Movie.feature"
#line hidden
        
        public MovieFeature(MovieFeature.FixtureData fixtureData, RestApiAssignment4_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Movie", "This feature performs CRUD operations on Movie class", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create a Movie")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie")]
        [Xunit.TraitAttribute("Description", "Create a Movie")]
        [Xunit.InlineDataAttribute("{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"Genre" +
            "Ids\":[1],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "201", new string[0])]
        [Xunit.InlineDataAttribute("{\"Name\":\"\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"GenreIds\":[1]" +
            ",\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("{\"Name\":\"TestName\",\"YearOfRelease\":\"\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"GenreIds\"" +
            ":[1],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"\",\"ActorIds\":[1],\"GenreIds\":[1]" +
            ",\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[],\"GenreI" +
            "ds\":[1],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"Genre" +
            "Ids\":[],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"Genre" +
            "Ids\":[1],\"ProducerId\":\"\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("{\"Name\":\"TestName\",\"YearOfRelease\":\"2048\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"Genre" +
            "Ids\":[1],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[100],\"Gen" +
            "reIds\":[1],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"Genre" +
            "Ids\":[100],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"Genre" +
            "Ids\":[1],\"ProducerId\":\"100\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        public void CreateAMovie(string request, string statusCode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("request", request);
            argumentsOfScenario.Add("statusCode", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Movie", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When(string.Format("I am making a post request to \'/movies\' with the following Data \'{0}\'", request), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then(string.Format("response code must be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get All Movies")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie")]
        [Xunit.TraitAttribute("Description", "Get All Movies")]
        public void GetAllMovies()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All Movies", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
 testRunner.When("I make GET Request to \'/movies\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then("response code must be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.And(@"response data must look like '[{""id"":1,""name"":""TestName"",""yearOfRelease"":2000,""plot"":""TestPlot"",""actors"":[{""id"":1,""name"":""TestName"",""gender"":""M"",""dob"":""2002-02-02T00:00:00"",""bio"":""TestBio""}],""genres"":[{""id"":1,""name"":""TestName""}],""producer"":{""id"":1,""name"":""TestName"",""gender"":""M"",""dob"":""2002-02-02T00:00:00"",""bio"":""TestBio""},""posterURL"":""TestURL""}]'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get a Movie by Id")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie")]
        [Xunit.TraitAttribute("Description", "Get a Movie by Id")]
        [Xunit.InlineDataAttribute("/movies/1", "200", @"{""id"":1,""name"":""TestName"",""yearOfRelease"":2000,""plot"":""TestPlot"",""actors"":[{""id"":1,""name"":""TestName"",""gender"":""M"",""dob"":""2002-02-02T00:00:00"",""bio"":""TestBio""}],""genres"":[{""id"":1,""name"":""TestName""}],""producer"":{""id"":1,""name"":""TestName"",""gender"":""M"",""dob"":""2002-02-02T00:00:00"",""bio"":""TestBio""},""posterURL"":""TestURL""}", new string[0])]
        [Xunit.InlineDataAttribute("/movies/100", "404", "Not found", new string[0])]
        public void GetAMovieById(string endpoint, string statusCode, string response, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("endpoint", endpoint);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get a Movie by Id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
 testRunner.When(string.Format("I make GET Request to \'{0}\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then(string.Format("response code must be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.And(string.Format("response data must look like \'{0}\'", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Update a Movie")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie")]
        [Xunit.TraitAttribute("Description", "Update a Movie")]
        [Xunit.InlineDataAttribute("/movies/1", "{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"Genre" +
            "Ids\":[1],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "200", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1", "{\"Name\":\"\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"GenreIds\":[1]" +
            ",\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1", "{\"Name\":\"TestName\",\"YearOfRelease\":\"\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"GenreIds\"" +
            ":[1],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1", "{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"\",\"ActorIds\":[1],\"GenreIds\":[1]" +
            ",\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1", "{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[],\"GenreI" +
            "ds\":[1],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1", "{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"Genre" +
            "Ids\":[],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1", "{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"Genre" +
            "Ids\":[1],\"ProducerId\":\"\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1", "{\"Name\":\"TestName\",\"YearOfRelease\":\"2048\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"Genre" +
            "Ids\":[1],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1", "{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[100],\"Gen" +
            "reIds\":[1],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1", "{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"Genre" +
            "Ids\":[100],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1", "{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"Genre" +
            "Ids\":[1],\"ProducerId\":\"100\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        [Xunit.InlineDataAttribute("movies/100", "{\"Name\":\"TestName\",\"YearOfRelease\":\"2000\",\"Plot\":\"TestPlot\",\"ActorIds\":[1],\"Genre" +
            "Ids\":[1],\"ProducerId\":\"1\",\"PosterURL\":\"TestURL\"}", "400", new string[0])]
        public void UpdateAMovie(string endpoint, string request, string statusCode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("endpoint", endpoint);
            argumentsOfScenario.Add("request", request);
            argumentsOfScenario.Add("statusCode", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a Movie", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.When(string.Format("I make PUT Request \'{0}\' with the following Data \'{1}\'", endpoint, request), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then(string.Format("response code must be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Delete a Movie")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie")]
        [Xunit.TraitAttribute("Description", "Delete a Movie")]
        [Xunit.InlineDataAttribute("/movies/1", "200", new string[0])]
        [Xunit.InlineDataAttribute("/movies/100", "404", new string[0])]
        public void DeleteAMovie(string endpoint, string statusCode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("endpoint", endpoint);
            argumentsOfScenario.Add("statusCode", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a Movie", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 59
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
 testRunner.When(string.Format("I make Delete Request \'{0}\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
 testRunner.Then(string.Format("response code must be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MovieFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MovieFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
